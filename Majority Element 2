 An integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
 by using boyer Moore algorithm 
 Time Complexity O(n)
space Complexity O(1)
 
 class Solution {
    public List<Integer> majorityElement(int[] nums) 
    {
    int c1=0;
        int m1=-1;
        int c2=0;
        int m2=-1;
       
        List<Integer> l=new ArrayList<>();
        for(int i=0;i<nums.length;i++)
        {
           
            if(m1==nums[i])
            {
                c1++;
            }
            else if(m2==nums[i])
            {
                c2++;
            }
             else if(c1==0)
            {
                m1=nums[i];
                c1=1;
            }
            else if(c2==0)
            {
                m2=nums[i];
                c2=1;
            }
            else
            {
                c1--;
                c2--;
            }
        }
       
         c1=0;
         c2=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==m1)
                c1++;
            else if(nums[i]==m2)
                c2++;
        }
        if(c1>nums.length/3)
            l.add(m1);
        if(c2>nums.length/3)
            l.add(m2);
        
        return l;
    }
}
