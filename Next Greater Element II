Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.
The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.



class Solution {
    public int[] nextGreaterElements(int[] nums) 
    {
    int n=nums.length;
        int []result=new int[n];
        Stack<Integer> s=new Stack<>();
        
        for(int i=2*n-1;i>=0;i--)
        {
            while(!s.isEmpty() && nums[s.peek()]<=nums[i % n])
            {
             s.pop();   
            }
            result[i%n]=s.empty()?-1:nums[s.peek()];
            s.push(i%n);
            
        }
        return result;
    }
}
